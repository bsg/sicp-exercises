(define (expmod base exp m)
    (cond   ((= exp 0) 1)
            ((even? exp)
                (remainder
                    (square (expmod base (/ exp 2) m))
                    m))
            (else
                (remainder
                    (* base (expmod base (- exp 1) m))
                    m))))

(define (fermat-test n)
    (define (try-it a)
        (= (expmod a n n) a))
        (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
    (cond ((= times 0) true)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else false)))

(define (report-prime n elapsed-time)
    (display n)
    (display " *** ")
    (display elapsed-time)
    (newline))

(define (start-prime-test n start-time)
    (if (fast-prime? n 1000)
        (report-prime n (- (runtime) start-time)) #f))

(define (timed-prime-test n)
    (start-prime-test n (runtime)))

(define (search-for-primes n)
    (define (iter n counter)
        (if (> counter 0)
            (if (timed-prime-test n)
                (iter (+ n 2) (- counter 1))
                (iter (+ n 2) counter))))
    (if (even? n)
        (iter (+ n 1) 3)
        (iter n 3)))

(search-for-primes 1000)
(search-for-primes 10000)
(search-for-primes 100000)
(search-for-primes 1000000)
(search-for-primes 10000000)
(search-for-primes 100000000)
(search-for-primes 1000000000)
(search-for-primes 10000000000)
(search-for-primes 100000000000)
(search-for-primes 1000000000000)
(search-for-primes 10000000000000)
(search-for-primes 100000000000000)
(search-for-primes 1000000000000000)
(search-for-primes 10000000000000000)
(search-for-primes 100000000000000000)
(search-for-primes 1000000000000000000)
(search-for-primes 10000000000000000000)
(search-for-primes 100000000000000000000)
(search-for-primes 1000000000000000000000)